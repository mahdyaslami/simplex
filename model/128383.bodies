class Provider
!!!128511.php!!!	__construct(in routeDefinitionCallback : callable, in errorHandler : callable = null, in method : string, in path : string, in cacheDisabled : bool) : void

        $this->routeDefinitionCallback = $routeDefinitionCallback;

        $this->errorHandler = $errorHandler;

        $this->path = $path;

        $this->method = $method;

        $this->cacheDisabled = $cacheDisabled;
!!!128639.php!!!	createDispatcher() : void

        $this->dispatcher = \FastRoute\cachedDispatcher($this->routeDefinitionCallback, [
            'cacheFile' => __DIR__ . DIRECTORY_SEPARATOR . self::CATCH_FILE_NAME,
            'cacheDisabled' => $this->cacheDisabled,
        ]);
!!!128767.php!!!	dispatch() : array

        $this->createDispatcher();

        return $this->dispatcher->dispatch($this->method, $this->path);
!!!128895.php!!!	search() : void

        $routeInfo = $this->dispatch();

        $this->routeStatus = $routeInfo[0];
        $this->routeHandler = $routeInfo[1] ?? null;
        $this->routeHandlerArguments = array_values($routeInfo[2] ?? []);
!!!129023.php!!!	callErrorHandler(in throwable : \Throwable) : void

        $handler = $this->errorHandler;

        if ($handler) {
            $handler($throwable);

            return;
        }

        if ($throwable instanceof HttpException) {
            http_response_code($throwable->getCode());
        }

        throw $throwable;
!!!129151.php!!!	callRouteHandler() : void

        $handler = $this->routeHandler;

        //
        // If handler is pair of class and action name, create instance of class.
        //
        if (is_array($handler) && is_string($handler[0])) {
            $handler[0] = new $handler[0]();
        }

        try {
            call_user_func($handler, $this->routeHandlerArguments);
        } catch (\Throwable $throwable) {
            $this->callErrorHandler($throwable);
        }
!!!129279.php!!!	getRoutingException() : HttpException|void

        if ($this->routeStatus === Dispatcher::NOT_FOUND) {
            return NotFoundException::createWithMessage($this->path);
        }

        if ($this->routeStatus === Dispatcher::METHOD_NOT_ALLOWED) {
            return MethodNotAllowedException::createWithMessage($this->method, $this->path);
        }
!!!129407.php!!!	route() : void

        $this->search();

        if ($this->routeStatus === Dispatcher::FOUND) {
            $this->callRouteHandler();
        } else {
            $this->callErrorHandler(
                $this->getRoutingException()
            );
        }
!!!129535.php!!!	register() : void

        $this->route();
!!!129663.php!!!	withErrorHandler(in callback : callable) : $this

        $this->errorHandler = $callback;

        return $this;
!!!129791.php!!!	create(in routeDefinitionCallback : callable) : $this

        return new self(
            $routeDefinitionCallback,
            null,
            $_SERVER['REQUEST_METHOD'],
            $_SERVER['REQUEST_URI'],
            $_ENV['APP_DEBUG'] ?? false
        );
